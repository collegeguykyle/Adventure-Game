<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turn_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Turn Order
update = false;
new_order = true;

//Update
who_lose = noone;
actions_lost = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn Order
if (new_order){
   update = false;
   pa = 0; //player actions
   ea = 0; //enemy actions
   with (player_u) other.pa += max_actions;
   with (enemy) other.ea += max_actions;
   
   who_start = "player";
   var low_a = ea;
   if (ea &gt; pa){ //team with most actions goes first, tie goes to player
      who_start = "enemy"; 
      low_a = pa;
   }
   high_a = pa;
   if (low_a = pa) high_a = ea; //set who has more actions
   var same = false;
   if (ea = pa) same = true;
   var turns = low_a;
   
   //Set Turn Order
   turn_order = 0; //empty turn order array
   //see if either side has 0 actions this round
   if (pa = 0){
      turn_order[0] = ea;
      exit;
   }
   else if (ea = 0){
      turn_order[0] = pa;
      exit;
   }
   //see if both side have same number of actions
   if (same = true){
      if (low_a &lt; 5) var rounds = low_a;
      else if (low_a mod 5 = 0){
         var rounds = 5;
      }
      else if (low_a mod 5 = 1){
         var rounds = 3;       
      }
      else if (low_a mod 5 = 2){
         var rounds = 3;
         turn_order[2] = 1;
         turn_order[3] = 1;     
      }
      else if (low_a mod 5 = 3){
         var rounds = 4;    
      }
      else if (low_a mod 5 = 4){
         var rounds = 4;
         turn_order[3] = 1;
         turn_order[4] = 1;     
      }
      var a_per = floor(low_a / rounds);
      for (i=0; i&lt;rounds*2; i++){
         turn_order[i] += a_per;
      }
   }
   //If unequal actions, 
   if (same = false){
      //determine actions per round for low number team first
      if (low_a &lt; 4) var rounds = low_a;
      else if (low_a mod 4 = 0){
         var rounds = 4;
      }
      else if (low_a mod 4 = 1){
         var rounds = 3;
         turn_order[1] = 1;
         turn_order[5] = 1;       
      }
      else if (low_a mod 4 = 2 &amp;&amp; low_a &gt; 6){
         var rounds = 4;
         turn_order[3] = 1;
         turn_order[5] = 1;     
      }
      else if (low_a mod 4 = 2){
         var rounds = 3;     
      }
      else if (low_a mod 4 = 3){
         var rounds = 3;
         turn_order[3] = 1;    
      }
      turn_order[rounds*2] = 0;
      var a_per = floor(low_a / rounds);
      for (i=1; i&lt;rounds*2; i+=2){
         turn_order[i] += a_per;
      }
      //And actions per round for high number team second
      var cent = floor((rounds*2+1)/2);
      if(!is_even(cent)) cent++;
      rounds++;
      a_per = floor(high_a / rounds);
      if (high_a mod rounds = 1){
         turn_order[cent] = 1;
      }
      else if (high_a mod rounds = 2){
         turn_order[cent] = 1;
         turn_order[cent-2] = 1;
      }
      else if (high_a mod rounds = 3){
         turn_order[cent] = 1;
         turn_order[cent-2] = 1;
         turn_order[cent+2] = 1;
      }
      else if (high_a mod rounds = 4){
         turn_order[cent] = 1;
         turn_order[cent-2] = 1;
         turn_order[cent+2] = 1;
         turn_order[cent+4] = 1;
      }
      for (i=0; i&lt;(rounds*2)-1; i+=2){
         turn_order[i] += a_per;
      }
   }          
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update after kill
if (update){
   var start = 0;
   if (who_start != who_lose) start = 1;
   var turns_rem = array_length_1d(turn_order);
   var ba = 999; //Determine this sides base actions per turn
   var j = 0;
   for (i=start; i&lt;turns_rem; i+=2){
       var n = turn_order[i];
       if (n != 0){ 
          if (n &lt; ba) ba = n;
          acts[j,0] = i;
          acts[j,1] = n;
          j++;
       }
   }
   //Determine which turns have extra actions and remove those first
   j=0;
   for (i=0; i&lt;array_height_2d(acts); i++){
       n = acts[i,1];
       if (n &gt; ba){
          extra[j] = acts[i,0];
          j++
       } 
   }
   //Remove extra actions
   n = array_length_1d(extra);
   var c = ceil(n/2);
   for (i=0; i&lt;n; i++) if (actions_lost &gt; 0){ //work outwards from the center.
       j = ceil(i/2) * 2;
       if (is_even(i)) j = j*-1;
       turn_order[c + j] -= 1;
       actions_lost--;
   }
   //No extra actions to remove, reorganize turn as needed
   

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Turn Order
var cent = view_wview[0] / 2;
var cs = 15; //circle size;
var gap = 15; //space between circles
var len = array_length_1d(turn_order);
var color = 0;
var start = cent - (cs+gap)*(len/2)
if (who_start = "enemy") color = 1;

for (i=0; i&lt;len; i++){
    if (color = 0){
    draw_set_color(c_green);
    color++;
    }
    else {
    draw_set_color(c_red);
    color--;
    }
    draw_circle(start + i*(cs+gap), 30, cs, false);
    draw_set_color(c_white);
    draw_text(start + i*(cs+gap)-5, 25, string(turn_order[i]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
