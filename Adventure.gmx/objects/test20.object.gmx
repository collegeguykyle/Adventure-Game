<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_knight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>no_walk</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Variables
range = 300; //movement range
path = path_add();
selected = false;
draw = false;
test = true;
surf = surface_create(1080, 720);
w = x - bbox_left;
h = y - bbox_top;
nogo = false;
highlight = false;
over = false;
over_other = false;
grow = 0;
update = false;
bbox = 1; // 1 for circle, 0 for rectangle
who = noone;
actions = 2;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SKILLS
skills[0] = sk_move;
skills[1] = sk_attack;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Characters Stats
attacks = 3;
min_d = 3;
max_d = 8;

dodge = 5;
block = 35;
parry = 10;
armor = 4;

name = "Allingar"
hp = 33;
max_hp = 47;

a_range = 75; //attack range
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End over_other
over_other = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT

depth = -y;

if (mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; x+w &amp;&amp; mouse_y &gt; y-50 &amp;&amp; mouse_y &lt; y)
  {
  over = true;
  game_control.over = id;
  }
else over = false;

if (mouse_check_button_pressed(mb_left))
   {
   if (selected = true &amp;&amp; game_control.over_other = false) 
      {
      selected = false;
      }
   if (over = true) 
      {
      selected = true;
      game_control.new_select = id;
      path = path_add();
      path_set_closed(path, false);
      path_add_point(path, x, y, 4);
      grow = 0;
      surface_free(surf);
      surf = surface_create(1080, 720);
      }
   }

if (selected = true &amp;&amp; mouse_check_button(mb_right))
   {
   n = path_get_number(path)-1;
   update = true;
   next_x = mouse_x;
   next_y = mouse_y;
   last_x = path_get_x(path, n);
   last_y = path_get_y(path, n)
   //see if point is beyond move points remaining and if so reduce it.
   dist = point_distance(last_x, last_y, next_x, next_y);
   dir = point_direction(last_x, last_y, next_x, next_y);
   if (dist + path_get_length(path) &gt; range)
      {
      dist = range - path_get_length(path);
      next_x = last_x + lengthdir_x(dist, dir);
      next_y = last_y + lengthdir_y(dist, dir);
      }
   //see if point can be traveled to without coliding with an object and if not reduce it
   i = 0
   where = 0;
   while (i &lt; dist/5)
      {
      who = collision_circle(last_x + lengthdir_x(i*5, dir), last_y + lengthdir_y(i*5, dir), 20, no_walk, false, true)
      if (who)
         {
         where = i;
         i = dist/5;
         }
      i++;
      }
   if (where &gt; 0)
      {
      next_x = last_x + lengthdir_x(where*5, dir);
      next_y = last_y + lengthdir_y(where*5, dir);
      }
   dist = point_distance(last_x, last_y, next_x, next_y);
   if (dist &lt; 20)
      {
      next_x = last_x;
      next_y = last_y;
      }
   }
   
if (selected = true &amp;&amp; mouse_check_button_released(mb_right))
   {
   if (over = false) path_add_point(path, next_x, next_y, 4);
   else if (path_get_number(path) &gt; 1) path_delete_point(path, path_get_number(path)-1);
   grow = 0;
   }

if (selected = true &amp;&amp; grow &lt; range - path_get_length(path) + 20) grow += (range - path_get_length(path) + 20) / 25;
else grow = range - path_get_length(path) + 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOW MOVEMENT INFO
/*
if (update = true)
   {
   update = false;
   surface_free(surf);
   surf = surface_create(1080, 720);
   surface_set_target(surf);
   draw_set_color(c_white);
   draw_circle(x, y, 20, false);
   for (i=0; i&lt;n+1; i++)
       {
       x1 = path_get_point_x(path, i);
       y1 = path_get_point_y(path, i);
       if (i=n)
          {
          x2 = next_x;
          y2 = next_y;
          }
       else
          {
          x2 = path_get_point_x(path, i+1);
          y2 = path_get_point_y(path, i+1);
          }
       
       dist = point_distance(x1, y1, x2, y2) / 10; 
       dir = point_direction(x1, y1, x2, y2);   
       draw_circle(x2, y2, 20, false);
       draw_sprite_ext(spr_green_box, -1, x1, y1, dist, 40/10, dir, -1, 1);
       
       }
   surface_reset_target();
   
   }


if (selected = true)
   {
   if (grow &lt; 0) grow = 0;
   draw_surface_ext(surf, 0, 0, 1, 1, 0, c_green, .3);
   draw_set_color(c_blue);
   draw_set_alpha(.6);
   xx = path_get_point_x(path, path_get_number(path)-1);
   yy = path_get_point_y(path, path_get_number(path)-1);
   draw_set_circle_precision(64);
   draw_circle(xx, yy, grow, true);
   draw_circle(xx, yy, grow-1, true);
   draw_circle(xx, yy, grow-2, true);
   draw_circle(xx, yy, grow-3, true);
   draw_circle(xx, yy, grow-4, true);
   draw_circle(xx, yy, grow-5, true);
   draw_set_alpha(1);
   }
   
   
draw_self();
if (over = true || selected = true)
   {   
   if (actions &gt; 0) draw_circle_part(x-2, y-22, -33, c_white, 50, 130, -30);    
   if (actions &gt; 1) draw_circle_part(x-2, y-22, -39, c_white, 45, 135, -36);
   }


if (over = true)
   {
   draw_set_color(c_red);
   draw_rectangle(bbox_left, y-50, x+w, y, true);
   }   
       
if (who)
   {
   draw_set_color(c_red);
   if (who.bbox = 0) draw_rectangle(who.bbox_left, who.bbox_top, who.bbox_right, who.bbox_bottom, true);
   else if (who.bbox = 1) draw_ellipse(who.bbox_left, who.bbox_top, who.bbox_right, who.bbox_bottom, true);
   }
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP BAR
if (over = true || selected = true) {

yy = y-sprite_height;
draw_set_color(c_black);

//How many health boxes are we drawing?
n = ceil(max_hp / 10);
mline = false;
if (n &gt; 5)
   {
   mline = true;
   n2 = n-5;
   }

//Where do we start the draw from?
if (mline = true) 
   {
   boxes = 5;
   x_start = x - 34;
   }
else {
     boxes = n;
     if (boxes = 5) x_start = x - 34;
     if (boxes = 4) x_start = x - 27;
     if (boxes = 3) x_start = x - 20;
     if (boxes = 2) x_start = x - 13;
     if (boxes = 1) x_start = x - 6;
}

//Draw HP Boxes
for (i=0; i&lt;boxes; i++)
    {
    if (i*10 &lt; hp)
       {
       draw_set_color (c_red);
       if (hp / max_hp &gt; .2) draw_set_color(c_orange);
       if (hp / max_hp &gt; .75) draw_set_color(c_green);
       if (i*10 + 10 &lt; hp) draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+11, yy+11, false);
       else {
            siz = hp - i*10;
            draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+siz, yy+11, false);
            }
       }
    draw_set_color(c_black);
    if (i*10 + 10 &gt; max_hp)
       {
       siz = max_hp - i*10 + 1;
       draw_rectangle(x_start+i*14, yy, x_start+i*14+siz, yy+12, true);
       }
    else draw_rectangle(x_start+i*14, yy, x_start+i*14+12, yy+12, true);
    }
    
//Draw Second stack of HP Boxes on top if more than 50 Max HP    
if (mline = true)
   {
   boxes = n2;
   yy -= 14;
   if (boxes = 5) x_start = x - 34;
   if (boxes = 4) x_start = x - 27;
   if (boxes = 3) x_start = x - 20;
   if (boxes = 2) x_start = x - 13;
   if (boxes = 1) x_start = x - 6;
   for (i=0; i&lt;boxes; i++)
      {
      if (i*10 + 50 &lt; hp)
         {
         draw_set_color (c_red);
           if (hp / max_hp &gt; .2) draw_set_color(c_orange);
           if (hp / max_hp &gt; .75) draw_set_color(c_green);
           if (i*10 + 50 + 10 &lt; hp) draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+11, yy+11, false);
           else {
             siz = hp - i*10 - 50;
             draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+siz, yy+11, false);
             }
         }
      draw_set_color(c_black);
      if (i*10 + 10 + 50 &gt; max_hp)
         {
         siz = max_hp - i*10 + 1 - 50;
         draw_rectangle(x_start+i*14, yy, x_start+i*14+siz, yy+12, true);
         }
       else draw_rectangle(x_start+i*14, yy, x_start+i*14+12, yy+12, true);
      }
   }

draw_set_halign(fa_center);
draw_text(x-1, yy-17, name);
draw_set_halign(fa_left);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>43,74</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
