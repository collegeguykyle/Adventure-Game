<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
draw_set_circle_precision(64);

//UI Variables
selected = noone;
pause = false;
transition = noone;
over_other = false;
skill_y = 750;

over = noone;
skill = "";
xx=0;

player = false;
ghost = noone;

mouse = "nothing";
state = "none";

//Turn variables
Round = 0;
timer = 0;

t_actions = 2;
t_who = "player";
new_round = true;
p_acts = 0;
e_acts = 0;

stack = ds_list_create();
ds_list_insert(stack, 0, "new round");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move View
can_drag = true;
if (can_drag = true)
   {
   if (mouse_check_button_pressed(mb_middle))
      {
      xs = mouse_x - view_xview[0];
      ys = mouse_y - view_yview[0];
      vxs = view_xview[0];
      vys = view_yview[0];
      drag = true;
      }
   if (mouse_check_button(mb_middle) &amp;&amp; drag = true)
      {
      xc = mouse_x - view_xview[0] - xs;
      yc = mouse_y - view_yview[0] - ys;
      view_xview[0] = vxs - xc;
      view_yview[0] = vys - yc;
      }
    if (mouse_check_button_released(mb_middle))
       {
       drag = false;
       } 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STACK / TURNS

//empty stack actions
if (ds_list_empty(stack))
   {
   if (t_who = "enemy") ds_list_insert(stack, 0, ai);
   else if (t_who = "player") ds_list_insert(stack, 0, "Player Input");
   }

//New Round   
txt = ds_list_find_value(stack, 0);
if (!is_string(txt)) txt = object_get_name(txt.object_index);
if (txt = "new round")
   {
   draw_set_font(ft_big);
   draw_set_halign(fa_center);
   draw_text(view_xview[0]+view_wport[0]/2, view_yview[0]+view_hport[0]/2, "New Round!");
   timer++;
   if (timer = 1)
      {
      with (enemy) 
         {
         actions = max_actions;
         game_control.e_acts += actions;
         }
      with (player_unit) 
         {
         actions = max_actions;
         game_control.p_acts += actions;
         }
      }
   //determine who gets first turn of round   
   if (timer = room_speed*3)
      {
      t_who = "player";
      if (e_acts &gt; p_acts) 
        {
        t_who = "enemy";
        ds_list_add(stack, ai);
        }
      else ds_list_add(stack,"player input");      
      timer = 0;
      ds_list_delete(stack, 0);      
      }
   draw_set_font(ft_normal);
   }  

//Turn Switch Over
if (txt = "end turn")
   {
   draw_set_font(ft_big);
   draw_set_halign(fa_center);
   draw_text(view_xview[0]+view_wport[0]/2, view_yview[0]+view_hport[0]/2, t_who+" Turn!");
   timer++;
   if (timer = 1)
      {
      if (t_who = "player") t_who = "enemy";
      else t_who = "player";
      t_actions = 2;
      }
   if (timer = room_speed*3)
      {
      timer = 0;
      ds_list_delete(stack, 0);
      if (t_who = "player") ds_list_add(stack, "player input");
      if (t_who = "enemy") ds_list_add(stack, ai);
      }
   draw_set_font(ft_normal);
   }
   
if (t_actions = 0)
   {
   last = ds_list_size(stack)-1;
   if (string(ds_list_find_value(stack, last)) != "end turn") ds_list_add(stack, "end turn");
   if (string(ds_list_find_value(stack, 0)) = "player input") ds_list_delete(stack, 0);
   }   
   
//Display Turns Remaining
e_turns = ceil(e_acts/2);
p_turns = ceil(p_acts/2);
if (e_turns &gt; p_turns+1) e_turns = p_turns+1;
if (p_turns &gt; e_turns+1) p_turns = e_turns+1;

draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(view_xview[0]+540-150, view_yview[0]+20, "Player Turns");
draw_text(view_xview[0]+540+150, view_yview[0]+20, "Enemy Turns");
draw_text(view_xview[0]+540-150, view_yview[0]+40, string(p_acts));
draw_text(view_xview[0]+540+150, view_yview[0]+40, string(e_acts));
draw_text(view_xview[0]+540, view_yview[0]+20, "Actions");
draw_text(view_xview[0]+540, view_yview[0]+40, string(t_actions));   

draw_text(view_xview[0]+540, view_yview[0]+60, t_who);   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Skill Boxes

//slide skills boxes on / off
if (selected != transition) 
   {
   skill_y += 10;
   if (skill_y &gt;= 800) transition = selected;
   }
if (selected = transition &amp;&amp; selected != noone)
   {
   skill_y -= 10;
   if (skill_y &lt;= 650) skill_y = 650;
   }


if (selected) 
   {
    n = array_length_1d(selected.skills);
    if (is_odd(n)) offset = 25;
    else offset = 55 - 60;
    
    for (i=0; i&lt;n; i++)
        {
        xx = 1080/2 - offset - floor(n/2)*60 + i*60;
        script_execute(selected.skills[i], selected, xx, skill_y);     
        }
    }

if (mouse_check_button_pressed(mb_left) &amp;&amp; over = noone &amp;&amp; state = "player") 
   {
   selected = noone;
   skill = "";
   }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Control

//if over skill button mouse = "skill" set by each skill in Draw Event

if (mouse_check_button_pressed(mb_left))
    {
    if (state = "player" &amp;&amp; over = noone)
       { 
       selected = noone;
       state = "none"
       }
    show_debug_message("Mouse State: " + state);
    }
    
    
if (state = "none")
   {
   with (move_ghost) instance_destroy();
   }

//Reset Mouse Over
over = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stack
draw_set_halign(fa_left);

//Draw stack on left side      
num = ds_list_size(stack);
for (i=0; i&lt;num; i++)
    {
    txt = ds_list_find_value(stack, i);
    if (!is_string(txt)) txt = object_get_name(txt.object_index);
    draw_set_color(c_white);
    draw_text(30, 50+i*20, txt);
    }

draw_text(15, 30, "STACK:");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT

//path reset in unit code

if (player = true) with (selected) {

n = path_get_number(path);
p_len = path_get_length(path);

if (mouse_check_button(mb_right))
   {
   game_control.state = "move";
   if (!instance_exists(move_ghost))
      {
      ghost = instance_create(mouse_x, mouse_y, move_ghost);
      ghost.sprite_index = sprite_index;
      }
   next_x = mouse_x;
   next_y = mouse_y;
   prev_x = path_get_x(path, n-1);
   prev_y = path_get_y(path, n-1);
   
   //draw range cirle
   if (n&gt;1)
      {
      draw_set_color(c_white);
      draw_set_alpha(.15);
      draw_circle(prev_x, prev_y, range-p_len, false);
      draw_set_alpha(1);
      }

   //see if point is beyond move points remaining and if so reduce it.
   dist = point_distance(prev_x, prev_y, next_x, next_y);
   dir = point_direction(prev_x, prev_y, next_x, next_y);
   if (dist + p_len &gt; range)
      {
      dist = range - path_get_length(path);
      next_x = prev_x + lengthdir_x(dist, dir);
      next_y = prev_y + lengthdir_y(dist, dir);
      }
   
   //see if point can be traveled to without coliding with an object and if not reduce it
   i = 0;
   where = 0;
   while (i &lt; dist/5)
      {
      who = collision_circle(prev_x + lengthdir_x(i*5, dir), prev_y + lengthdir_y(i*5, dir), 20, no_walk, false, true)
      if (who)  //if collision end while and record where collision occured
         {
         where = i;
         i = dist/5;
         }
      i++;
      }
   if (where &gt; 0) //if there was collision reduce path to prior to collision point
      {
      next_x = prev_x + lengthdir_x(where*5, dir);
      next_y = prev_y + lengthdir_y(where*5, dir);
      }
   dist = point_distance(prev_x, prev_y, next_x, next_y);
   
   //if there was a collission draw bounding box for item
   draw_set_color(c_red)
   draw_set_alpha(.6);
   if (who &amp;&amp; who.bbox = 0) draw_rectangle(who.bbox_left, who.bbox_top, who.bbox_right, who.bbox_bottom, true);   
   if (who &amp;&amp; who.bbox = 1) draw_ellipse(who.bbox_left, who.bbox_top, who.bbox_right, who.bbox_bottom, true);
   
   //Draw path from last point to current dest &amp; move range
   d = 0;
   draw_set_color(c_white);
   while (d &lt; dist-5)
       {
       x3 = prev_x + lengthdir_x(d, dir);  
       y3 = prev_y + lengthdir_y(d, dir);
       draw_circle(x3, y3, 2.5, false);
       d += 25;
       }
   draw_set_alpha(.15);
   draw_circle(next_x, next_y, range-dist-p_len, false);
   draw_set_alpha(.6);
   draw_ellipse(next_x-(x-bbox_left), next_y-(y-bbox_top), next_x+(bbox_right-x), next_y+(bbox_bottom-y), true);

   ghost.x = next_x;
   ghost.y = next_y;
   ghost.dir = dir;
   draw_set_alpha(1);
   }

//Draw rest of the path
if (n&gt;1)
   {       
   //Previous path points
   for (i=0; i&lt;n; i++)
       {
       x1 = path_get_point_x(path, i);
       y1 = path_get_point_y(path, i);
       if (i+1=n)
          {
          x2 = next_x;
          y2 = next_y;
          }
       else
          {
          x2 = path_get_point_x(path, i+1);
          y2 = path_get_point_y(path, i+1);
          }
       //draw dots to show path
       dist2 = point_distance(x1, y1, x2, y2); 
       dir = point_direction(x1, y1, x2, y2);   
       d = 0;
       draw_set_color(c_white);
       while (d &lt; dist2-5)
           {
           x3 = x1 + lengthdir_x(d, dir);  
           y3 = y1 + lengthdir_y(d, dir);
           draw_circle(x3, y3, 2.5, false);
           d += 25;
           }
       }
   
   //If not dragging draw move range and ghost
   if (!mouse_check_button(mb_right))
       {
        draw_set_color(c_white);
        draw_set_alpha(.15);
        draw_circle(x2, y2, range-p_len, false);
        draw_set_alpha(.6);
        draw_set_color(c_white);
        draw_ellipse(x2-(x-bbox_left), y2-(y-bbox_top), x2+(bbox_right-x), y2+(bbox_bottom-y), true); 
        draw_set_alpha(1);
       }
    }
    
if (n=1) 
    {
    draw_set_color(c_white);
    draw_set_alpha(.15);
    draw_circle(x, y, range, false);
    draw_set_alpha(1);
    }
    
//Release right mouse add point to path
if (mouse_check_button_released(mb_right))
   {
   if (p_len &lt; range) path_add_point(path, next_x, next_y, move_speed);  
   game_control.state = "player";
   }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
