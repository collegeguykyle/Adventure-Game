<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_interface</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
globalvar selected; selected = noone;
globalvar mouse_over; mouse_over = false;
show_path = false;
can_drag = false;
move_here = 0;
stack_move = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Click Priorities
over = collision_point(mouse_x, mouse_y, game_obj, true, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
if (over = noone &amp;&amp; mouse_check_button(mb_right))
{
   find_path(selected.x, selected.y, mouse_x, mouse_y);
   show_path = true;
}

if (show_path &amp;&amp; mouse_check_button_released(mb_left)) for (i=0; i&lt;array_height_2d(move_here); i++)
{
   if (point_distance(mouse_x, mouse_y, move_here[i,0], move_here[i,1]) &lt; selected.size)
   {
   //While currently I only intend for one unit to move at a time with this code
   //this is designed so that if there is an instane where I wanted two or more
   //units to move simultaneously they could do so by having their IDs inserted
   //between "move" and "end move".
   ds_list_insert(stack, 0, "move");
   ds_list_insert(stack, 1, selected);
   ds_list_insert(stack, 2, "end move");
   //show_path = false;
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move View
can_drag = true;
if (can_drag = true)
{
if (mouse_check_button_pressed(mb_middle))
{
xs = mouse_x - view_xview[0];
ys = mouse_y - view_yview[0];
vxs = view_xview[0];
vys = view_yview[0];
drag = true;
}
if (mouse_check_button(mb_middle) &amp;&amp; drag = true)
{
xc = mouse_x - view_xview[0] - xs;
yc = mouse_y - view_yview[0] - ys;
view_xview[0] = vxs - xc;
view_yview[0] = vys - yc;
}
if (mouse_check_button_released(mb_middle))
{
drag = false;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Units
var who = collision_point(mouse_x, mouse_y, player_u, false, true)
if (mouse_check_button_pressed(mb_left) &amp;&amp; who) selected = who;
//draw selection circle on selected unit
draw_set_color(c_aqua);
draw_circle(selected.x, selected.y, 25, true);
//draw highlight if over unit
if (who != selected){
draw_set_color(c_yellow);
draw_circle(who.x, who.y, 25, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Movement Path
if (path_get_point_x(path, 0) != selected.x || path_get_point_y(path, 0) != selected.y){
show_path = false;
}
if (show_path){
move_here = 0;
draw_set_color(c_white);
draw_path(path, selected.x, selected.y, true);
var moves = selected.moves;
var len = path_get_length(path);
if (len &gt; 0){
draw_set_color(c_black);
var pt = moves / len;
if (pt &gt; 1) pt = 1;
var pt2 = pt
var nn = 1;
//draw a circle at each point in path where character
//would end use all their moves in a single turn
while (pt2 &lt; 1){
var xx = path_get_x(path, pt2);
var yy = path_get_y(path, pt2);
draw_circle(xx, yy, selected.size, true);
draw_text(xx-5, yy-5, string(nn));
pt2 += pt;
move_here[nn-1,0] = xx;
move_here[nn-1,1] = yy;
nn++;
}
//Draw last point in path
if (pt2 &gt;= 1){
pt2 = 1;
var xx = path_get_x(path, pt2);
var yy = path_get_y(path, pt2);
draw_circle(xx, yy, selected.size, true);
draw_text(xx-5, yy-5, string(nn));
move_here[nn-1,0] = xx;
move_here[nn-1,1] = yy;
}
}
}
//Highlight a circle in yellow if mouse is in it
var size = array_height_2d(move_here);
for (i=0; i&lt;size; i++){
if (point_distance(mouse_x, mouse_y, move_here[i,0], move_here[i,1]) &lt;= selected.size){
draw_set_color(c_yellow);
draw_circle(move_here[i,0], move_here[i,1], selected.size+1, true);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
