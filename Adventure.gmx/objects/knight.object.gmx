<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_knight1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>player_unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SKILLS
skills[0] = sk_move;
skills[1] = sk_attack;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Characters Stats
attacks = 3;
min_d = 3;
max_d = 8;

dodge = 5;
block = 35;
parry = 10;
armor = 4;

name = "Allingar"
hp = 33;
max_hp = 47;

a_range = 75; //attack range
range = 300; //movement range
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Variables

path = path_add();
selected = false;
draw = false;
test = true;
surf = surface_create(1080, 720);
w = x - bbox_left;
h = y - bbox_top;
nogo = false;
highlight = false;
over = false;
over_other = false;
grow = 0;
update = false;
bbox = 1; // 1 for circle, 0 for rectangle
who = noone;
actions = 2;

image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Control

over_other = false;
depth = -y;

if (mouse_x &gt; x-42 &amp;&amp; mouse_x &lt; x+40 &amp;&amp; mouse_y &gt; y-110 &amp;&amp; mouse_y &lt; y+15)
  {
  over = true;
  game_control.over = id;
  }

else over = false;

    //LEFT CLICK
if (mouse_check_button_pressed(mb_left))
   {
   if (selected = true &amp;&amp; game_control.over_other = false) 
      {
      selected = false;
      }
   if (over = true) 
      {
      selected = true;
      game_control.new_select = id;
      }
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP BAR
if (over = true || selected = true) {

yy = y-130;
draw_set_color(c_black);

//How many health boxes are we drawing?
n = ceil(max_hp / 10);
mline = false;
if (n &gt; 5)
   {
   mline = true;
   n2 = n-5;
   }

//Where do we start the draw from?
if (mline = true) 
   {
   boxes = 5;
   x_start = x - 34;
   }
else {
     boxes = n;
     if (boxes = 5) x_start = x - 34;
     if (boxes = 4) x_start = x - 27;
     if (boxes = 3) x_start = x - 20;
     if (boxes = 2) x_start = x - 13;
     if (boxes = 1) x_start = x - 6;
}

//Draw HP Boxes
for (i=0; i&lt;boxes; i++)
    {
    if (i*10 &lt; hp)
       {
       draw_set_color (c_red);
       if (hp / max_hp &gt; .2) draw_set_color(c_orange);
       if (hp / max_hp &gt; .75) draw_set_color(c_green);
       if (i*10 + 10 &lt; hp) draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+11, yy+11, false);
       else {
            siz = hp - i*10;
            draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+siz, yy+11, false);
            }
       }
    draw_set_color(c_black);
    if (i*10 + 10 &gt; max_hp)
       {
       siz = max_hp - i*10 + 1;
       draw_rectangle(x_start+i*14, yy, x_start+i*14+siz, yy+12, true);
       }
    else draw_rectangle(x_start+i*14, yy, x_start+i*14+12, yy+12, true);
    }
    
//Draw Second stack of HP Boxes on top if more than 50 Max HP    
if (mline = true)
   {
   boxes = n2;
   yy -= 14;
   if (boxes = 5) x_start = x - 34;
   if (boxes = 4) x_start = x - 27;
   if (boxes = 3) x_start = x - 20;
   if (boxes = 2) x_start = x - 13;
   if (boxes = 1) x_start = x - 6;
   for (i=0; i&lt;boxes; i++)
      {
      if (i*10 + 50 &lt; hp)
         {
         draw_set_color (c_red);
           if (hp / max_hp &gt; .2) draw_set_color(c_orange);
           if (hp / max_hp &gt; .75) draw_set_color(c_green);
           if (i*10 + 50 + 10 &lt; hp) draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+11, yy+11, false);
           else {
             siz = hp - i*10 - 50;
             draw_rectangle(x_start+i*14+1, yy+1, x_start+i*14+siz, yy+11, false);
             }
         }
      draw_set_color(c_black);
      if (i*10 + 10 + 50 &gt; max_hp)
         {
         siz = max_hp - i*10 + 1 - 50;
         draw_rectangle(x_start+i*14, yy, x_start+i*14+siz, yy+12, true);
         }
       else draw_rectangle(x_start+i*14, yy, x_start+i*14+12, yy+12, true);
      }
   }

draw_set_halign(fa_center);
draw_text(x-1, yy-17, name);
draw_set_halign(fa_left);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT
/*
if (over = true &amp;&amp; mouse_check_button_pressed(mb_left))
   {
   path = path_add();
   path_set_closed(path, false);
   path_add_point(path, x, y, 4);
   }
   
if (selected = true){

n = path_get_number(path);
p_len = path_get_length(path);

if (p_len &lt; range &amp;&amp; mouse_check_button(mb_right))
   {
   next_x = mouse_x;
   next_y = mouse_y;
   prev_x = path_get_x(path, n-1);
   prev_y = path_get_y(path, n-1);
   
   //draw range cirle
   if (n&gt;1)
      {
      draw_set_color(c_green);
      draw_set_alpha(.2);
      draw_circle(prev_x, prev_y, range-p_len, false);
      draw_set_alpha(1);
      }

   //see if point is beyond move points remaining and if so reduce it.
   dist = point_distance(prev_x, prev_y, next_x, next_y);
   dir = point_direction(prev_x, prev_y, next_x, next_y);
   if (dist + p_len &gt; range)
      {
      dist = range - path_get_length(path);
      next_x = prev_x + lengthdir_x(dist, dir);
      next_y = prev_y + lengthdir_y(dist, dir);
      }
   
   //see if point can be traveled to without coliding with an object and if not reduce it
   i = 0;
   where = 0;
   while (i &lt; dist/5)
      {
      who = collision_circle(prev_x + lengthdir_x(i*5, dir), prev_y + lengthdir_y(i*5, dir), 20, no_walk, false, true)
      if (who)  //if collision end while and record where collision occured
         {
         where = i;
         i = dist/5;
         }
      i++;
      }
   if (where &gt; 0) //if there was collision reduce path to prior to collision point
      {
      next_x = prev_x + lengthdir_x(where*5, dir);
      next_y = prev_y + lengthdir_y(where*5, dir);
      }
   dist = point_distance(prev_x, prev_y, next_x, next_y);
      
   //Draw path from last point to current dest &amp; move range
   d = 0;
   draw_set_color(c_white);
   while (d &lt; dist-5)
       {
       x3 = prev_x + lengthdir_x(d, dir);  
       y3 = prev_y + lengthdir_y(d, dir);
       draw_circle(x3, y3, 2.5, false);
       d += 25;
       }
   draw_set_color(c_green);
   draw_set_alpha(.2);
   draw_circle(next_x, next_y, range-dist-p_len, false);
   draw_set_color(c_white);
   draw_set_alpha(.6);
   draw_ellipse(next_x-(x-bbox_left), next_y-(y-bbox_top), next_x+(bbox_right-x), next_y+(bbox_bottom-y), true);
   draw_set_alpha(.3);
   draw_sprite(sprite_index, image_dir(dir), next_x, next_y);
   draw_set_alpha(1);
   }

//Draw rest of the path
if (n&gt;1)
   {       
   //Previous path points
   for (i=0; i&lt;n; i++)
       {
       x1 = path_get_point_x(path, i);
       y1 = path_get_point_y(path, i);
       if (i+1=n)
          {
          x2 = next_x;
          y2 = next_y;
          }
       else
          {
          x2 = path_get_point_x(path, i+1);
          y2 = path_get_point_y(path, i+1);
          }
       //draw dots to show path
       dist2 = point_distance(x1, y1, x2, y2); 
       dir = point_direction(x1, y1, x2, y2);   
       d = 0;
       draw_set_color(c_white);
       while (d &lt; dist2-5)
           {
           x3 = x1 + lengthdir_x(d, dir);  
           y3 = y1 + lengthdir_y(d, dir);
           draw_circle(x3, y3, 2.5, false);
           d += 25;
           }
       }
   
   //If not dragging draw move range and ghost
   if (!mouse_check_button(mb_right))
       {
        draw_set_color(c_green);
        draw_set_alpha(.2);
        draw_circle(x2, y2, range-dist-p_len, false);
        draw_set_alpha(.6);
        draw_set_color(c_white);
        draw_ellipse(x2-(x-bbox_left), y2-(y-bbox_top), x2+(bbox_right-x), y2+(bbox_bottom-y), true); 
        draw_set_alpha(.3);
        draw_sprite(sprite_index, image_dir(dir), x2, y2);
        draw_set_alpha(1);
       }
    
    }
    
if (n=1) 
    {
    draw_set_color(c_green);
    draw_set_alpha(.2);
    draw_circle(x, y, range, false);
    draw_set_alpha(1);
    }
    
//Release right mouse add point to path
if (mouse_check_button_released(mb_right))
   {
   if (p_len + dist &lt; range) path_add_point(path, next_x, next_y, 1);  
   
   }

}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,30</point>
    <point>46,46</point>
  </PhysicsShapePoints>
</object>
